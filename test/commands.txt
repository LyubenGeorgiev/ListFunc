eq(0,0.00000001)
eq(0,[])
eq([],0)
eq(0.000001,0)
eq(1,-1)
eq([1 2 3],[1 2 3])
eq([[[[[]]]]],[[[[[]]]]])
eq(list(1),list(1))
eq(-100,[-100])
eq(123.456,123.456)
le(1.000000001, 1.0)
le(1.0, 1.000000001)
le(-1.000000001, 1.0)
le(-1.1, 1.000000001)
le(-5,-4)
nand(0,undefined(5))
nand(0,1)
nand(1,0)
nand(1,1)
length(123123)
length(-312321.2)
length([1 2 3])
length([[1 2] 3])
length([])
length([[[[[[[]]]]]]])
head([1 undefined() undefined() undefined()])
head(list(1,2,3))
head([[1 2 3]])
head([-3 -2.66666666])
head(tail([undefined() 1 2 3]))
tail([undefined() 1 2 3])
concat(concat([1 2 3], [4 5 6]), [7 8 9])
if(1, 1, undefined())
if(0, undefined(), 1)
write(1)
write(undefined())
int(-5.4)
int(5.4)
int(5.999999)
int(-5.99999)
int(1)
int(0)
mod(6, -2)
mod(7, -2)
mod(-3, 10)
mod(-3, -2)
pow -> if (eq(#1, 0), 1, if(mod(#1,2), mul(#0, pow(mul(#0, #0), div(#1, 2))), pow(mul(#0, #0), div(#1, 2))))
fib -> div(sub(pow(add(1, sqrt(5)), #0), pow(sub(1, sqrt(5)), #0)), mul(pow(2, #0), sqrt(5)))
fact -> if(eq(#0, 1), 1, mul(#0, fact(sub(#0,1))))
fibRec -> if (le(#0, 2), #0, add(fibRec(sub(#0,1)), fibRec(sub(#0,2))))
not -> nand(#0, 1)
and -> not(nand(#0, #1))
divisors -> concat([2], list(3, 2, sub(div(int(sqrt(#0)), 2), 1)))
containsDevisors -> if(length(#0), if(mod(#1,int(head(#0))), containsDevisors(tail(#0), #1), 1), 0)
isPrime -> if(eq(#0, 2), 1, not(containsDevisors(divisors(#0), #0)))
filterPrimes -> if(length(#0), if(isPrime(int(head(#0))), concat([head(#0)], filterPrimes(tail(#0))), filterPrimes(tail(#0))), [])
primesTo -> filterPrimes(concat([2], list(3, 1, sub(#0, 2))))
pow(2,30)
fib(20)
fibRec(20)
eq(fib(20), fibRec(20))
fact(10)
not(1)
not(0)
and(0,0)
and(0,1)
and(1,0)
and(1,1)
divisors(900)
primesTo(100)
min -> if(length(#0), if(nand(nand(length(#1), le(head(#0), head(#1))), 1), min(tail(#0), concat([head(#0)], #1)), min(tail(#0), concat(#1, [head(#0)]))), #1)
sort -> if(length(#0), concat([head(min(#0, []))], sort(tail(min(#0, [])))), [])
sort([4 2 1 3])